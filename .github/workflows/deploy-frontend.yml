name: Build and Deploy Frontend

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Optional: set FRONTEND_API_BASE_URL in repository secrets to provide API_URL to Vercel
      FRONTEND_API_BASE_URL: ${{ secrets.FRONTEND_API_BASE_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint
        working-directory: frontend
        run: npm run lint

      - name: Build
        working-directory: frontend
        run: |
          # Provide Vite build with VITE_API_BASE_URL from secrets so the static build contains the correct API endpoint
          if [ -n "${{ secrets.FRONTEND_API_BASE_URL }}" ]; then
            echo "Using VITE_API_BASE_URL from secrets"
            export VITE_API_BASE_URL="${{ secrets.FRONTEND_API_BASE_URL }}"
          fi
          npm run build

      - name: Build frontend Docker image (verify Dockerfile)
        run: |
          # Build the Docker image using the frontend folder as context so ops/nginx is included
          # Pass the VITE_API_BASE_URL as a build-arg so the builder stage has the same env
          if [ -n "${{ secrets.FRONTEND_API_BASE_URL }}" ]; then
            docker build --build-arg VITE_API_BASE_URL="${{ secrets.FRONTEND_API_BASE_URL }}" -f frontend/Dockerfile -t stockease-frontend-ci:latest frontend
          else
            docker build -f frontend/Dockerfile -t stockease-frontend-ci:latest frontend
          fi

      - name: Deploy to Vercel (use frontend Dockerfile)
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          FRONTEND_API_BASE_URL: ${{ secrets.FRONTEND_API_BASE_URL }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_TOKEN:-}" ]; then
            echo "VERCEL_TOKEN not set in repository secrets" >&2
            exit 1
          fi
          flags=()
          if [ -n "${FRONTEND_API_BASE_URL:-}" ]; then
            # Pass to Vercel as VITE_API_BASE_URL so the build picks it up
            flags+=(--env "VITE_API_BASE_URL=${FRONTEND_API_BASE_URL}")
          fi
          # Deploy with Vercel CLI: deploy the frontend folder which contains a Dockerfile
          # Vercel will detect the Dockerfile and build using it on Vercel's side.
          npx vercel --prod --token "$VERCEL_TOKEN" --confirm --yes "${flags[@]}"
